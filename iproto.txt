There's support for internal communication ewrecv<->ewterm here - DC1-DC4 control characters are used for that. The protocol is symmetric, unless explicitly specified otherwise. We should ignore all unknown SEND packets (each one has to have own DC2 switch) and reply with SEND 0x70 to all unknown ASK packets, and we should maintain as big backwards compatibility as possible.

Upon connect, both ewterm and ewrecv will send DC1. If the peer does NOT send DC1, we MUST NOT send any other DC code anymore to the peer.

There is an auth check by cram authorization done then - if it fails or the peer does not support DC communication, the server/client MAY decide to disconnect.

After this handshake, ewrecv will query ewterm about user (ASK 0x01). Then, ewterm usually asks for a burst and ewrecv feeds it then. The burst is started by <SI> and terminated by <SO>, and the history of previous communication is sent in the burst, and user connect packets are sent for all users already connected. After receiving SEND 0x01.  user connect packet for the client itself will be sent, prefixed with ! in <data>.

Reality about compatibility: theoretically, it should be fine, but practically there are some limitations, like killing off of unauthenticated users and so on.


DC1:
Normal exchange protocol forwarding. Usually, all internal communication is always terminated with DC1, which switch the peer back to the forwarder mode. Note that ewrecv doesn't forward special chars from the exchange, but sends appropriate DC2 packets instead.


DC2:
	We SEND something to the peer. The packet has format:
	<DC2> <opcode> [<data>] <DCx>

	Possible opcodes are:

== 2.1a ==

	0xff	Version - <data> contains string describing the peer version. For future compatibility, anything following ',', ':' or '-' should be stripped.
			Example: <DC2><0x00>2.1a
	0x01	User - <data> contains string describing the user running the thing. For future compatibility, anything following '@' or ':' should be stripped.
			Example: <DC2><0x01>pasky
	0x02	Notify - <data> contains message, which should be broadcasted to all other ewterms, if the peer is ewrecv, or shown (highlighted if possible) to the user if the peer is ewterm. Newline is automatically appended to the message when printing it.
			Example: <DC2><0x02>Hello, people!<DC1>
	0x80	Unknown ASK - We got ASK we can't understand. <data> contains the ASK packet we can't understand.
			Example: <DC2><0x80><0xab>blahblah?!<DC1>

== 2.1b ==

	These (0x40-0x47, 0x04-0x06) are valid only for ewrecv->ewterm direction.

	0x04	Forward mode - Forwarding mode change by <data> (strip everything after [,.:]):
			RW Forwarding from/to ewterm (default)
			RO Forwarding to ewterm only
			Example: <DC2><0x03>RO<DC1>
	0x05	User connect - Some user connected. <data> contains uname@host:id[,].*.
			If <uname> starts with !, it's you.
			Example: <DC2><0x05>!pasky@pasky.ji.cz:73<DC1>
	0x06	User disconnect	Some user disconnected. <data> contains uname@host:id[,].*.
			Example: <DC2><0x06>pasky@pasky.ji.cz:73<DC1>

== 2.2a ==

	0x40	Prompt start - Prompt string starts NOW. <data> reserved.
			Example: <DC2><0x40><DC1>*
	0x41	Prompt end - Prompt string ends NOW and we can send our input. <data> has variable length, the first byte can be:
			'<' Normal cmd prompt. Follows number of the job, anything after [,.:@;-] should be stripped. If job number is 0, the job number is unknown.
			'I' Input request prompt (anything but '<', which is 0x00)
			'U' Username request
			'P' Login password request
			'p' Common password request
			'F' File password request
			Example: *<DC2><0x41><1234<DC1>
	0x42	Login error - Login attempt was unsuccessful. <data> reserved.
	0x43	Login success - Login attempt was successful. <data> reserved.
	0x44	Logout correct - Correct logout happenned. <data> reserved.
	0x45	Job end - End of the job with number in <data> (strip [,.:@;-].*). Note that this is sent for each "END JOB", not only the active one.
			Example: <DC2><0x45>1234<DC1>
	0x46	Mask number - The current message has mask number in <data> (strip [,.:@;-].*).
			Example: <DC2><0x46>5678<DC1>
	0x47	Header - Parsed data from header in <data>, separated by ','. They are:
			job,omt,username,exchange
			More may follow in future.
			Example: <DC2><0x47>1,OMT2,PEBA,GTS2<DC1>

== 2.3a ==

	This one is both-direction:

	0x03	PrivMsg	- This is "talk" message from one user to certain (set of) user(s). The "user" part of <data> is originator in ewrecv->ewterm direction and target in ewterm->ewrecv direction. <data> contains user@host:id=message, where anything between id and '=' should be ignored.
     		Example: <DC2><0x03>pasky@pasky.ji.cz:0=Hello, world!<DC1>

== 5.0pre3 ==

	0x07	CRAM - This is reply to the CRAM ASK packet, containg the MD5 sum. Strip [,.:@;-].*.

	0x08	CRAM failed	This indicates that the CRAM authentification failed. This is usually sent right before dropping the connection. Ignore the data part.


DC3:
	We ASK the peer for something. The packet has format:
	<DC3> <opcode> [<data>] <DCx>

	Possible opcodes are:

== 2.1a ==

	0xff	Version	 - Show version, no <data> (leave blank).
			Example: <DC3><0x00>

	0x01	User - Show user running the peer, no <data> (lb).
			Example: <DC3><0x01>

== 2.2a ==

	These (0x40-0x43) are valid only for ewterm->ewrecv direction.

	0x40	Prompt request - Request prompt from the exchange, no <data> (lb).
	0x41	Login request - Request login prompt from the exchange, no <data> (lb).
	0x42	Cancel prompt - Cancel current prompt, no data (lb).

== 2.2b ==

	0x43	Takeover - Make me master, no data (lb).

== 5.0pre3 ==

	This one is valid only for ewrecv->ewterm direction.

	0x02	CRAM - MD5 the passed string + password and send back. <data> contains the string, strip everything after [,.:@;-].*.

== 5.0rc2 ==

	This is valid only for ewterm->ewrecv direction.

	0x3f	Burst me - Send ewterm the burst, containing the history of previous activity. See above for the burst format description. <data> contains number of lines (everything if empty), strip everything after [,.:@;-].*.

DC4:
 	Like DC1, but we don't forward the stuff to other ewterms. Nice for passwords stuff.

